local camera = require("render.camera")

local TIME_COUNTER = 100
local TIME_SEC = 2

function init(self)
    self.counter = 0
    self.num = 0
end

local main = {
    camera.PROJ_FIXED,
    camera.PROJ_FIXED_FIT,
    camera.PROJ_STRETCH,
    camera.PROJ_FIXED
}

local sizes = {
    {width = 1200, height = 1200},
    {width = 480, height = 800},
    {width = 600, height = 950},
    {width = 960, height = 640},
}

local infos = {
    {far = 2, near = -3, zoom = 0.5},
    {far = 1, near = -2, zoom = 1},
    {far = 3, near = -1, zoom = 1},
    {far = 1, near = -1, zoom = 1},
}

--[[
User APIs in go world.

If user want to use a defaul projection:
camera.use(camera.PROJ_FIXED_FIT)
camera.use(camera.PROJ_FIXED)
camera.use(camera.PROJ_STRETCH)

If user wants to use camera:
camera.use("#camera")
camera.disuse("#camera")

The first used camera is default camera.
If there is no camera used - then projection used as default camera.
]]


function update(self)
    self.counter = self.counter + 1
    if self.counter == TIME_COUNTER then
        self.counter = 0
        self.num = self.num + 1
        if self.num > #main then
            self.counter = 1000
            print("[ortographic camera]")
            camera.use("#camera")
            go.animate(".", "position", go.PLAYBACK_LOOP_PINGPONG, vmath.vector3(814, 58, 932), go.EASING_INSINE, TIME_SEC)
            timer.delay(TIME_SEC, false, function()
                camera.disuse("#camera")
                print("[perspective camera]")
                msg.post("3d#main", "activate")
            end)
            return
        end
        print(main[self.num])
        local inf = infos[self.num]
        camera.use(main[self.num], inf.near, inf.far, inf.zoom)
        msg.post("@render:", "resize", sizes[self.num] )
    end
end